* Configs

** Dashboard
#+BEGIN_SRC emacs-lisp

(defun my/dashboard-banner ()
  """Set a dashboard banner including information on package initialization
   time and garbage colnlections."""
  (setq dashboard-banner-logo-title
        (format "Emacs ready in %.2f seconds with %d garbage collections."
                (float-time (time-subtract after-init-time before-init-time)) gcs-done)))

(use-package dashboard
  :init
  (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  (add-hook 'dashboard-mode-hook 'my/dashboard-banner)
  :config
  (setq dashboard-startup-banner 'logo)	     
  (dashboard-setup-startup-hook)
  :bind ("C-c d r b" . dashboard-refresh-buffer))
(setq dashboard-center-content t)

#+END_SRC
** Code
*** Nix
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
    :mode ("\\.nix\\'" "\\.nix.in\\'"))
  (use-package nix-drv-mode
    :ensure nix-mode
    :mode "\\.drv\\'")
  (use-package nix-shell
    :ensure nix-mode
    :commands (nix-shell-unpack nix-shell-configure nix-shell-build))
  (use-package nix-repl
    :ensure nix-mode
    :commands (nix-repl))
#+END_SRC
*** Lua
#+BEGIN_SRC emacs-lisp
(use-package lua-mode)
#+END_SRC

** Some Settings
#+BEGIN_SRC emacs-lisp

  (recentf-mode 1) ; find recent files
  (setq history-length 25)
  (savehist-mode 1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode t)
  (display-time-mode 1);;show time in buffer
  (add-hook 'text-mode-hook 'visual-line-mode)
  ;; Enable copypasting outside of Emacs
  (setq x-select-enable-clipboard t)
  ;; Disable automatic creation of backup files
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  ;; Transform yes-or-no questions into y-or-n
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Highlight current line
  (global-hl-line-mode t)
(add-hook 'compilation-finish-functions
  (lambda (buf str)
    (if (null (string-match ".*exited abnormally.*" str))
        ;;no errors, make the compilation window go away in a few seconds
        (progn
          (run-at-time
           "2 sec" nil 'delete-windows-on
           (get-buffer-create "*compilation*"))
          (message "No Compilation Errors!")))))
#+END_SRC

** Global keybinds
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c r") 'recentf-open-files)
(global-set-key (kbd "C-c e f") 'elfeed)
(global-set-key (kbd "C-c e b") 'eval-buffer)
(global-set-key (kbd "C-c e r") 'eval-region)
(global-set-key (kbd "C-c q r") 'query-replace)
(global-set-key (kbd "C-c r") 'recentf-open-files)
(global-set-key (kbd "C-c d k") 'describe-key)

#+END_SRC

** Tab Bar Mode

#+BEGIN_SRC emacs-lisp

  (setq initial-major-mode 'org-mode);; create an org-mode *scratch* buffer
  (setq tab-bar-new-tab-choice "*scratch*")
  (global-set-key (kbd "C-c b") 'tab-bar-switch-to-prev-tab)
  (global-set-key (kbd "C-c f") 'tab-bar-switch-to-next-tab)
  (global-set-key (kbd "C-c t") 'tab-bar-new-tab)
  (global-set-key (kbd "C-c w") 'tab-bar-close-tab)

#+END_SRC

** Ido
#+BEGIN_SRC emacs-lisp

  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)

  ;; Ido-vert
  (use-package ido-vertical-mode
    :ensure
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'up-and-down-only)
  (setq inhibit-startup-message t)

#+END_SRC

** Look and Feel   
*** Theme
#+BEGIN_SRC emacs-lisp

;  (use-package gruvbox-theme
 ;     :ensure t)
  ; (load-theme 'gruvbox-dark-soft t)
  (use-package catppuccin-theme)
  (load-theme 'catppuccin t)

#+END_SRC
*** rainbow delimiters
#+BEGIN_SRC emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC
*** All the icons
#+BEGIN_SRC emacs-lisp
  ;(use-package all-the-icons
  ;  :if (display-graphic-p))
  (use-package all-the-icons :ensure t :if
  (display-graphic-p) :config (unless (find-font
                                       (font-spec :name "all-the-icons"))
                                (all-the-icons-install-fonts)))
#+END_SRC
*** doom mode line
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC
*** rainbow mode
#+BEGIN_SRC emacs-lisp

  (use-package rainbow-mode)
  (define-globalized-minor-mode my-global-rainbow-mode rainbow-mode
    (lambda () (rainbow-mode 1)))
  (my-global-rainbow-mode 1)

#+END_SRC
*** font

#+BEGIN_SRC emacs-lisp


#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("<f20>" . avy-goto-char))
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp

  (use-package smex
    :bind ("M-x" . 'smex))

#+END_SRC
** elfeed
#+BEGIN_SRC emacs-lisp

  (use-package elfeed)
  (setq elfeed-feeds
        '("https://lukesmith.xyz/rss.xml" linux
          "https://planet.emacslife.com/atom.xml" emacs ))
  (setq-default elfeed-search-filter "@1-week-ago +unread ")

#+END_SRC
** whichkey
#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0))

#+END_SRC
** org
*** Org-journal
#+BEGIN_SRC emacs-lisp

  (use-package org-journal)

#+END_SRC
*** prg settings
#+BEGIN_SRC emacs-lisp

  (setq org-startup-indented t) ;;wraps text?
  (setq org-startup-folded t) ;; starts org folded
  
#+END_SRC
